// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4x3.MeasureResource;
using System;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc4x3.GeometryResource;
//## Custom using statements
//##


namespace Xbim.Ifc4x3.GeometryResource
{
	[ExpressType("IfcPointByDistanceExpression", 1494)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcPointByDistanceExpression : IfcPoint, IInstantiableEntity, IContainsEntityReferences, IEquatable<@IfcPointByDistanceExpression>
	{

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcPointByDistanceExpression(IModel model, int label, bool activated) : base(model, label, activated)  
		{
		}

		#region Explicit attribute fields
		private IfcCurveMeasureSelect _distanceAlong;
		private IfcLengthMeasure? _offsetLateral;
		private IfcLengthMeasure? _offsetVertical;
		private IfcLengthMeasure? _offsetLongitudinal;
		private IfcCurve _basisCurve;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, null, null, 3)]
		public IfcCurveMeasureSelect @DistanceAlong 
		{ 
			get 
			{
				if(_activated) return _distanceAlong;
				Activate();
				return _distanceAlong;
			} 
			set
			{
				SetValue( v =>  _distanceAlong = v, _distanceAlong, value,  "DistanceAlong", 1);
			} 
		}	
		[EntityAttribute(2, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, null, null, 4)]
		public IfcLengthMeasure? @OffsetLateral 
		{ 
			get 
			{
				if(_activated) return _offsetLateral;
				Activate();
				return _offsetLateral;
			} 
			set
			{
				SetValue( v =>  _offsetLateral = v, _offsetLateral, value,  "OffsetLateral", 2);
			} 
		}	
		[EntityAttribute(3, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, null, null, 5)]
		public IfcLengthMeasure? @OffsetVertical 
		{ 
			get 
			{
				if(_activated) return _offsetVertical;
				Activate();
				return _offsetVertical;
			} 
			set
			{
				SetValue( v =>  _offsetVertical = v, _offsetVertical, value,  "OffsetVertical", 3);
			} 
		}	
		[EntityAttribute(4, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, null, null, 6)]
		public IfcLengthMeasure? @OffsetLongitudinal 
		{ 
			get 
			{
				if(_activated) return _offsetLongitudinal;
				Activate();
				return _offsetLongitudinal;
			} 
			set
			{
				SetValue( v =>  _offsetLongitudinal = v, _offsetLongitudinal, value,  "OffsetLongitudinal", 4);
			} 
		}	
		[EntityAttribute(5, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, null, null, 7)]
		public IfcCurve @BasisCurve 
		{ 
			get 
			{
				if(_activated) return _basisCurve;
				Activate();
				return _basisCurve;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _basisCurve = v, _basisCurve, value,  "BasisCurve", 5);
			} 
		}	
		#endregion


		#region Derived attributes
		[EntityAttribute(0, EntityAttributeState.Derived, EntityAttributeType.None, EntityAttributeType.None, null, null, 0)]
		public IfcDimensionCount @Dim 
		{
			get 
			{
				//## Getter for Dim
				return BasisCurve.Dim;
				//##
			}
		}

		#endregion


		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
					_distanceAlong = (IfcCurveMeasureSelect)(value.EntityVal);
					return;
				case 1: 
					_offsetLateral = value.RealVal;
					return;
				case 2: 
					_offsetVertical = value.RealVal;
					return;
				case 3: 
					_offsetLongitudinal = value.RealVal;
					return;
				case 4: 
					_basisCurve = (IfcCurve)(value.EntityVal);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcPointByDistanceExpression other)
	    {
	        return this == other;
	    }
        #endregion

		#region IContainsEntityReferences
		IEnumerable<IPersistEntity> IContainsEntityReferences.References 
		{
			get 
			{
				if (@BasisCurve != null)
					yield return @BasisCurve;
			}
		}
		#endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}