// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;

//## Custom using statements
//##

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc4x3.GeometricConstraintResource
{
	public partial class @IfcAlignment2DVerSegLine : IIfcAlignment2DVerSegLine
	{

		[CrossSchemaAttribute(typeof(IIfcAlignment2DVerSegLine), 4)]
		Ifc4.MeasureResource.IfcLengthMeasure IIfcAlignment2DVerticalSegment.StartDistAlong 
		{ 
			get
			{
				return new Ifc4.MeasureResource.IfcLengthMeasure(StartDistAlong);
			} 
			set
			{
				StartDistAlong = new MeasureResource.IfcLengthMeasure(value);
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcAlignment2DVerSegLine), 5)]
		Ifc4.MeasureResource.IfcPositiveLengthMeasure IIfcAlignment2DVerticalSegment.HorizontalLength 
		{ 
			get
			{
				return new Ifc4.MeasureResource.IfcPositiveLengthMeasure(HorizontalLength);
			} 
			set
			{
				HorizontalLength = new MeasureResource.IfcPositiveLengthMeasure(value);
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcAlignment2DVerSegLine), 6)]
		Ifc4.MeasureResource.IfcLengthMeasure IIfcAlignment2DVerticalSegment.StartHeight 
		{ 
			get
			{
				return new Ifc4.MeasureResource.IfcLengthMeasure(StartHeight);
			} 
			set
			{
				StartHeight = new MeasureResource.IfcLengthMeasure(value);
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcAlignment2DVerSegLine), 7)]
		Ifc4.MeasureResource.IfcRatioMeasure IIfcAlignment2DVerticalSegment.StartGradient 
		{ 
			get
			{
				return new Ifc4.MeasureResource.IfcRatioMeasure(StartGradient);
			} 
			set
			{
				StartGradient = new MeasureResource.IfcLengthMeasure(value);
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcAlignment2DVerSegLine), 1)]
		Ifc4.MeasureResource.IfcBoolean? IIfcAlignment2DSegment.TangentialContinuity 
		{ 
			get
			{
				//## Handle return of TangentialContinuity for which no match was found
				//TODO: Handle return of TangentialContinuity for which no match was found
				return default;
				//##
			} 
			set
			{
				//## Handle setting of TangentialContinuity for which no match was found
				//TODO: Handle setting of TangentialContinuity for which no match was found
				throw new System.NotImplementedException();
				//##
			}
		}

		[CrossSchemaAttribute(typeof(IIfcAlignment2DVerSegLine), 2)]
		Ifc4.MeasureResource.IfcLabel? IIfcAlignment2DSegment.StartTag 
		{ 
			get
			{
				if (!StartTag.HasValue) return null;
				return new Ifc4.MeasureResource.IfcLabel(StartTag.Value);
			} 
			set
			{
				StartTag = value.HasValue ? 
					new MeasureResource.IfcLabel(value.Value) :  
					 new MeasureResource.IfcLabel?() ;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcAlignment2DVerSegLine), 3)]
		Ifc4.MeasureResource.IfcLabel? IIfcAlignment2DSegment.EndTag 
		{ 
			get
			{
				if (!EndTag.HasValue) return null;
				return new Ifc4.MeasureResource.IfcLabel(EndTag.Value);
			} 
			set
			{
				EndTag = value.HasValue ? 
					new MeasureResource.IfcLabel(value.Value) :  
					 new MeasureResource.IfcLabel?() ;
				
			}
		}
		IEnumerable<IIfcAlignment2DVertical> IIfcAlignment2DVerticalSegment.ToVertical 
		{ 
			get
			{
				return Model.Instances.Where<IIfcAlignment2DVertical>(e => e.Segments != null &&  e.Segments.Contains(this), "Segments", this);
			} 
		}
		IEnumerable<IIfcPresentationLayerAssignment> IIfcRepresentationItem.LayerAssignment 
		{ 
			get
			{
				return Model.Instances.Where<IIfcPresentationLayerAssignment>(e => e.AssignedItems != null &&  e.AssignedItems.Contains(this), "AssignedItems", this);
			} 
		}
		IEnumerable<IIfcStyledItem> IIfcRepresentationItem.StyledByItem 
		{ 
			get
			{
				return Model.Instances.Where<IIfcStyledItem>(e => (e.Item as IfcAlignment2DVerSegLine) == this, "Item", this);
			} 
		}
	//## Custom code
	//##
	}
}